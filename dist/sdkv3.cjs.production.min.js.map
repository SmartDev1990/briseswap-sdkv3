{"version":3,"file":"sdkv3.cjs.production.min.js","sources":["../src/enums/ChainId.ts","../src/enums/ChainKey.ts","../src/enums/Rounding.ts","../src/enums/SolidityType.ts","../src/enums/TradeType.ts","../src/enums/TradeVersion.ts","../src/constants/addresses.ts","../src/constants/chain.ts","../src/constants/legacy.ts","../src/entities/AbstractCurrency.ts","../src/entities/NativeCurrency.ts","../src/functions/validateAndParseAddress.ts","../src/entities/Token.ts","../src/constants/tokens.ts","../src/entities/Native/Avalanche.ts","../src/entities/Native/Binance.ts","../src/entities/Native/Celo.ts","../src/entities/Native/Ether.ts","../src/entities/Native/Fantom.ts","../src/entities/Native/Harmony.ts","../src/entities/Native/Heco.ts","../src/entities/Native/Matic.ts","../src/entities/Native/Movr.ts","../src/entities/Native/Okex.ts","../src/entities/Native/xDai.ts","../src/entities/Native/Palm.ts","../src/entities/Native/Fuse.ts","../src/entities/Native/Telos.ts","../src/entities/Native/Glmr.ts","../src/entities/Native/Kava.ts","../src/entities/Native/Metis.ts","../src/constants/natives.ts","../src/constants/numbers.ts","../src/constants/solidity.ts","../src/errors.ts","../src/entities/Fraction.ts","../src/entities/CurrencyAmount.ts","../src/entities/Price.ts","../src/functions/computePairAddress.ts","../src/functions/math.ts","../src/entities/Pair.ts","../src/entities/Percent.ts","../src/entities/Route.ts","../src/functions/computePriceImpact.ts","../src/functions/sortedInsert.ts","../src/entities/Trade.ts","../src/functions/contract.ts","../src/router.ts","../src/functions/rebase.ts","../src/functions/validateSolidityTypeInstance.ts"],"sourcesContent":["export enum ChainId {\r\n  MAINNET = 1,\r\n  ROPSTEN = 3,\r\n  RINKEBY = 4,\r\n  GÖRLI = 5,\r\n  KOVAN = 42,\r\n  MATIC = 137,\r\n  MATIC_TESTNET = 80001,\r\n  FANTOM = 250,\r\n  FANTOM_TESTNET = 4002,\r\n  XDAI = 100,\r\n  BSC = 56,\r\n  BSC_TESTNET = 97,\r\n  ARBITRUM = 42161,\r\n  ARBITRUM_TESTNET = 79377087078960,\r\n  MOONBEAM_TESTNET = 1287,\r\n  AVALANCHE = 43114,\r\n  AVALANCHE_TESTNET = 43113,\r\n  HECO = 128,\r\n  HECO_TESTNET = 256,\r\n  HARMONY = 1666600000,\r\n  HARMONY_TESTNET = 1666700000,\r\n  OKEX = 66,\r\n  OKEX_TESTNET = 65,\r\n  CELO = 42220,\r\n  PALM = 11297108109,\r\n  PALM_TESTNET = 11297108099,\r\n  MOONRIVER = 1285,\r\n  FUSE = 122,\r\n  TELOS = 40,\r\n  HARDHAT = 31337,\r\n  MOONBEAM = 1284,\r\n  OPTIMISM = 10,\r\n  KAVA = 2222,\r\n  METIS = 1088,\r\n  ARBITRUM_NOVA = 42170,\r\n}\r\n","export enum ChainKey {\r\n  ARBITRUM = 'arbitrum',\r\n  ARBITRUM_TESTNET = 'arbitrum-testnet',\r\n  AVALANCHE = 'avalanche',\r\n  AVALANCHE_TESTNET = 'avalance-testnet',\r\n  BSC = 'bsc',\r\n  BSC_TESTNET = 'bsc-testnet',\r\n  CELO = 'celo',\r\n  MAINNET = 'MAINNET',\r\n  FANTOM = 'fantom',\r\n  FANTOM_TESTNET = 'fantom-testnet',\r\n  FUSE = 'fuse',\r\n  GÖRLI = 'goerli',\r\n  HARMONY = 'harmony',\r\n  HARMONY_TESTNET = 'harmony-testnet',\r\n  HECO = 'heco',\r\n  HECO_TESTNET = 'heco-testnet',\r\n  KOVAN = 'kovan',\r\n  ROPSTEN = 'ropsten',\r\n  MATIC = 'polygon',\r\n  MATIC_TESTNET = 'matic-testnet',\r\n  MOONBEAM_TESTNET = 'moonbeam-testnet',\r\n  MOONRIVER = 'moonriver',\r\n  OKEX = 'okex',\r\n  OKEX_TESTNET = 'okex-testnet',\r\n  PALM = 'palm',\r\n  PALM_TESTNET = 'palm-testnet',\r\n  RINKEBY = 'rinkeby',\r\n  TELOS = 'telos',\r\n  XDAI = 'xdai',\r\n  MOONBEAM = 'moonbeam',\r\n  OPTIMISM = 'optimism',\r\n  KAVA = 'kava',\r\n  METIS = 'metis',\r\n  ARBITRUM_NOVA = 'arbitrum-nova',\r\n}\r\n","export enum Rounding {\r\n  ROUND_DOWN = 0,\r\n  ROUND_HALF_UP = 1,\r\n  ROUND_UP = 3,\r\n}\r\n","export enum SolidityType {\r\n    uint8 = 'uint8',\r\n    uint256 = 'uint256',\r\n}","export enum TradeType {\r\n  EXACT_INPUT,\r\n  EXACT_OUTPUT,\r\n}\r\n","export enum TradeVersion {\r\n  V2TRADE,\r\n  V3TRADE,\r\n}\r\n","import { AddressMap } from '../types'\r\nimport { ChainId } from '../enums'\r\n\r\nexport const RICE_ADDRESS: AddressMap = {\r\n  [ChainId.MAINNET]: '0x1eb697Cb6F457F6a65C682F7f7c65F9f2E622A34',\r\n}\r\n\r\nexport const USDC_ADDRESS: AddressMap = {\r\n  [ChainId.MAINNET]: '0xcf2DF9377A4e3C10e9EA29fDB8879d74C27FCDE7',\r\n}\r\n\r\nexport const USD_ADDRESS: AddressMap = {\r\n  [ChainId.MAINNET]: USDC_ADDRESS[ChainId.MAINNET],\r\n}\r\n\r\nexport const WETH9_ADDRESS: AddressMap = {\r\n  [ChainId.MAINNET]: '0x0eb9036cbE0f052386f36170c6b07eF0a0E3f710',\r\n}\r\n\r\nexport const WNATIVE_ADDRESS: AddressMap = {\r\n  [ChainId.MAINNET]: WETH9_ADDRESS[ChainId.MAINNET],\r\n}\r\n\r\nexport const DAI_ADDRESS: AddressMap = {\r\n  [ChainId.MAINNET]: '0x5d8CEEf69160a9692471670D5f7147157656fF46',\r\n}\r\n\r\nexport const USDT_ADDRESS: AddressMap = {\r\n  [ChainId.MAINNET]: '0xDe14b85cf78F2ADd2E867FEE40575437D5f10c06',\r\n}\r\n\r\nexport const MIM_ADDRESS: AddressMap = {\r\n  [ChainId.MAINNET]: '',\r\n}\r\n\r\nexport const FRAX_ADDRESS: AddressMap = {\r\n  [ChainId.MAINNET]: '',\r\n}\r\n\r\nexport const FACTORY_ADDRESS: AddressMap = {\r\n  [ChainId.MAINNET]: '0x05C7E31449Aedd06c39077cc184BA691CA40Aad5',\r\n}\r\n\r\nexport const ROUTER_ADDRESS: AddressMap = {\r\n  [ChainId.MAINNET]: '0x4bf299209f97b5bef24ccd0a55acb72d2c9df94e',\r\n}\r\n\r\nexport const MASTERCHEF_ADDRESS: AddressMap = {\r\n  [ChainId.MAINNET]: '0xe79a91734296407527E43a74a454E19E52b2c09c',\r\n}\r\n\r\nexport const BAR_ADDRESS: AddressMap = {\r\n  [ChainId.MAINNET]: '0x722f5f012D29Cc4d6464B6a46343fBA3881eaa56',\r\n}\r\n\r\nexport const MAKER_ADDRESS: AddressMap = {\r\n  [ChainId.MAINNET]: '0xE11fc0B43ab98Eb91e9836129d1ee7c3Bc95df50',\r\n}\r\n\r\nexport const TIMELOCK_ADDRESS: AddressMap = {\r\n  [ChainId.MAINNET]: '0x936e1d1bfc2547544a4d28d3d8ce66280e6be6c3',\r\n}\r\n\r\nexport const BENTOBOX_ADDRESS: AddressMap = {\r\n  [ChainId.MAINNET]: '0x7489907896a65dcccb79c95bd4a00f7e922b8652',\r\n}\r\n\r\nexport const KASHI_ADDRESS: AddressMap = {\r\n  [ChainId.MAINNET]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\r\n}\r\n\r\nexport const SUSHISWAP_SWAPPER_ADDRESS: AddressMap = {\r\n  [ChainId.MAINNET]: '0xf441ca6ed0c071adaa58a89dd9b6cf5a04b9af10',\r\n}\r\n\r\nexport const SUSHISWAP_MULTISWAPPER_ADDRESS: AddressMap = {\r\n  [ChainId.MAINNET]: '0xd7a2043d18a1ce4301f2ebc7fa2741a56cd9de7e',\r\n}\r\n\r\nexport const SUSHISWAP_MULTI_EXACT_SWAPPER_ADDRESS: AddressMap = {\r\n  [ChainId.MAINNET]: '0x71c8ebeda911af79a3fb01655aa4e3c1c31a4525',\r\n}\r\n\r\nexport const PEGGED_ORACLE_ADDRESS = '0x6cbfbB38498Df0E1e7A4506593cDB02db9001564'\r\n\r\nexport const SUSHISWAP_TWAP_0_ORACLE_ADDRESS = '0x66F03B0d30838A3fee971928627ea6F59B236065'\r\n\r\nexport const SUSHISWAP_TWAP_1_ORACLE_ADDRESS = '0x0D51b575591F8f74a2763Ade75D3CDCf6789266f'\r\n\r\nexport const CHAINLINK_ORACLE_ADDRESS: AddressMap = {\r\n  [ChainId.MAINNET]: '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB',\r\n}\r\n\r\nexport const BORING_HELPER_ADDRESS: AddressMap = {\r\n  [ChainId.MAINNET]: '0x8794a289c57eb01dfda6f8a6d21978f36abdd5aa',\r\n}\r\n\r\nexport const MINICHEF_ADDRESS: AddressMap = {\r\n  [ChainId.MATIC]: '0x870cfa0f8D013A4C84eF026B3414ee06F2BE8121',\r\n}\r\n\r\nexport const MASTERCHEF_V2_ADDRESS: AddressMap = {\r\n  [ChainId.MAINNET]: '0xEF0881eC094552b2e128Cf945EF17a6752B4Ec5d',\r\n}\r\n\r\nexport const ENS_REGISTRAR_ADDRESS: AddressMap = {\r\n  [ChainId.MAINNET]: '0xc30b62e221e65b862af6bb0c3fa950b9cc2e6a9d',\r\n}\r\n\r\nexport const ZAPPER_ADDRESS: AddressMap = {\r\n  [ChainId.MAINNET]: '0xa5d8094cd6846a9691966f22ecd1bb6d7c18dc64',\r\n}\r\n\r\nexport const MERKLE_DISTRIBUTOR_ADDRESS: AddressMap = {\r\n}\r\n\r\nexport const MULTICALL2_ADDRESS: AddressMap = {\r\n  [ChainId.MAINNET]: '0x0c9fa47336a0f6ec6b461bc878f41917e7ac2205',\r\n}\r\n\r\nexport const BALANCE_FETCHER_ADDRESS: AddressMap = {\r\n  [ChainId.MAINNET]: '0xfb9d2a104789563cac593771b4f854c6495b7bef',\r\n}\r\n\r\nexport const MULTISIG_ADDRESS: AddressMap = {\r\n  [ChainId.MAINNET]: '0x048ac4eb14c480077429cf55e44980953a891f92',\r\n}\r\n","import { ChainId } from '../enums'\r\nimport { ChainKey } from '../enums'\r\n\r\nexport const CHAIN_KEY: { [chainId: number]: ChainKey } = {\r\n  [ChainId.MAINNET]: ChainKey.MAINNET,\r\n}\r\n","import { ChainId } from '../enums/ChainId'\r\n\r\nexport const INIT_CODE_HASH: { [chainId: number]: string } = {\r\n  [ChainId.MAINNET]: '0x90618374b23f01465ee4d1918e1b8d86f6343aa379f21db850c34634e2a2194b',\r\n}\r\n","import { Currency } from './Currency'\r\nimport { Token } from './Token'\r\nimport invariant from 'tiny-invariant'\r\n\r\n/**\r\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\r\n */\r\nexport abstract class AbstractCurrency {\r\n  /**\r\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\r\n   */\r\n  public abstract readonly isNative: boolean\r\n  /**\r\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\r\n   */\r\n  public abstract readonly isToken: boolean\r\n\r\n  /**\r\n   * The chain ID on which this currency resides\r\n   */\r\n  public readonly chainId: number\r\n  /**\r\n   * The decimals used in representing currency amounts\r\n   */\r\n  public readonly decimals: number\r\n  /**\r\n   * The symbol of the currency, i.e. a short textual non-unique identifier\r\n   */\r\n  public readonly symbol?: string\r\n  /**\r\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\r\n   */\r\n  public readonly name?: string\r\n\r\n  /**\r\n   * Constructs an instance of the base class `BaseCurrency`.\r\n   * @param chainId the chain ID on which this currency resides\r\n   * @param decimals decimals of the currency\r\n   * @param symbol symbol of the currency\r\n   * @param name of the currency\r\n   */\r\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\r\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\r\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\r\n\r\n    this.chainId = chainId\r\n    this.decimals = decimals\r\n    this.symbol = symbol\r\n    this.name = name\r\n  }\r\n\r\n  /**\r\n   * Returns whether this currency is functionally equivalent to the other currency\r\n   * @param other the other currency\r\n   */\r\n  public abstract equals(other: Currency): boolean\r\n\r\n  /**\r\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\r\n   * implement this to be used in Uniswap\r\n   */\r\n  public abstract get wrapped(): Token\r\n}\r\n","import { AbstractCurrency } from './AbstractCurrency'\r\n\r\n/**\r\n * Represents the native currency of the chain on which it resides, e.g.\r\n */\r\nexport abstract class NativeCurrency extends AbstractCurrency {\r\n  public readonly isNative: true = true\r\n  public readonly isToken: false = false\r\n}\r\n","import { getAddress } from '@ethersproject/address'\r\nimport invariant from 'tiny-invariant'\r\nimport warning from 'tiny-warning'\r\n\r\n// warns if addresses are not checksummed\r\nexport function validateAndParseAddress(address: string): string {\r\n  try {\r\n    const checksummedAddress = getAddress(address)\r\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\r\n    return checksummedAddress\r\n  } catch (error) {\r\n    invariant(false, `${address} is not a valid address.`)\r\n  }\r\n}\r\n","import { AbstractCurrency } from './AbstractCurrency'\r\nimport { Currency } from './Currency'\r\nimport invariant from 'tiny-invariant'\r\nimport { validateAndParseAddress } from '../functions/validateAndParseAddress'\r\n\r\n/**\r\n * Represents an ERC20 token with a unique address and some metadata.\r\n */\r\nexport class Token extends AbstractCurrency {\r\n  public readonly chainId: number\r\n  public readonly address: string\r\n\r\n  public readonly isNative: false = false\r\n  public readonly isToken: true = true\r\n\r\n  public constructor(chainId: number, address: string, decimals: number, symbol?: string, name?: string) {\r\n    super(chainId, decimals, symbol, name)\r\n    this.chainId = chainId\r\n    this.address = validateAndParseAddress(address)\r\n  }\r\n\r\n  /**\r\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\r\n   * @param other other token to compare\r\n   */\r\n  public equals(other: Currency): boolean {\r\n    return other.isToken && this.chainId === other.chainId && this.address === other.address\r\n  }\r\n\r\n  /**\r\n   * Returns true if the address of this token sorts before the address of the other token\r\n   * @param other other token to compare\r\n   * @throws if the tokens have the same address\r\n   * @throws if the tokens are on different chains\r\n   */\r\n  public sortsBefore(other: Token): boolean {\r\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\r\n    invariant(this.address !== other.address, 'ADDRESSES')\r\n    return this.address.toLowerCase() < other.address.toLowerCase()\r\n  }\r\n\r\n  /**\r\n   * Return this token, which does not need to be wrapped\r\n   */\r\n  public get wrapped(): Token {\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Return logo\r\n   */\r\n  // public get logo(): string | null {\r\n  //   return this.chainId in CHAIN_KEY ? `https://raw.githubusercontent.com/sushiswap/logos/main/network/${CHAIN_KEY[this.chainId]}/.jpg` : undefined\r\n  // }\r\n}\r\n\r\n/**\r\n * Compares two currencies for equality\r\n */\r\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\r\n  if (currencyA instanceof Token && currencyB instanceof Token) {\r\n    return currencyA.equals(currencyB)\r\n  } else if (currencyA instanceof Token) {\r\n    return false\r\n  } else if (currencyB instanceof Token) {\r\n    return false\r\n  } else {\r\n    return currencyA === currencyB\r\n  }\r\n}\r\n","import { ChainTokenMap, TokenMap } from '../types'\r\nimport { RICE_ADDRESS, USDC_ADDRESS, USD_ADDRESS, WETH9_ADDRESS, WNATIVE_ADDRESS } from './addresses'\r\n\r\nimport { ChainId } from '../enums'\r\nimport { Token } from '../entities/Token'\r\n\r\nexport const USDC: TokenMap = {\r\n  [ChainId.MAINNET]: new Token(ChainId.MAINNET, USDC_ADDRESS[ChainId.MAINNET], 6, 'USDC', 'USD Coin'),\r\n}\r\n\r\nexport const WETH9: TokenMap = {\r\n  [ChainId.MAINNET]: new Token(ChainId.MAINNET, WETH9_ADDRESS[ChainId.MAINNET], 18, 'WETH', 'Wrapped Ether')\r\n}\r\n\r\nexport const WNATIVE: TokenMap = {\r\n  [ChainId.MAINNET]: WETH9[ChainId.MAINNET],\r\n}\r\n\r\nexport const RICE: ChainTokenMap = {\r\n  [ChainId.MAINNET]: new Token(ChainId.MAINNET, RICE_ADDRESS[ChainId.MAINNET], 18, 'RICE', 'Rice Token'),\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Avalanche extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'AVAX', 'Avalanche')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Avalanche } = {}\r\n\r\n  public static onChain(chainId: number): Avalanche {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Avalanche(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Binance extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'BNB', 'Binance Coin')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Binance } = {}\r\n\r\n  public static onChain(chainId: number): Binance {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Binance(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Celo extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'CELO', 'Celo')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wcelo = WNATIVE[this.chainId]\r\n    invariant(!!wcelo, 'WRAPPED')\r\n    return wcelo\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Celo } = {}\r\n\r\n  public static onChain(chainId: number): Celo {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Celo(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WETH9 } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\n/**\r\n * Ether is the main usage of a 'native' currency, i.e. for MAINNET mainnet and all testnets\r\n */\r\nexport class Ether extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'BRISE', 'Brise')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const weth9 = WETH9[this.chainId]\r\n    invariant(!!weth9, 'WRAPPED')\r\n    return weth9\r\n  }\r\n\r\n  private static _etherCache: { [chainId: number]: Ether } = {}\r\n\r\n  public static onChain(chainId: number): Ether {\r\n    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Fantom extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'FTM', 'Fantom')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Fantom } = {}\r\n\r\n  public static onChain(chainId: number): Fantom {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Fantom(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Harmony extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'ONE', 'Harmony')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Harmony } = {}\r\n\r\n  public static onChain(chainId: number): Harmony {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Harmony(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Heco extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'HT', 'Huobi Token')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Heco } = {}\r\n\r\n  public static onChain(chainId: number): Heco {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Heco(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Matic extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'MATIC', 'Matic')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Matic } = {}\r\n\r\n  public static onChain(chainId: number): Matic {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Matic(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Movr extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'MOVR', 'Moonriver')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Movr } = {}\r\n\r\n  public static onChain(chainId: number): Movr {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Movr(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Okex extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'OKT', 'OKExChain')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Okex } = {}\r\n\r\n  public static onChain(chainId: number): Okex {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Okex(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class xDai extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'XDAI', 'xDai')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: xDai } = {}\r\n\r\n  public static onChain(chainId: number): xDai {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new xDai(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Palm extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'PALM', 'Palm')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Palm } = {}\r\n\r\n  public static onChain(chainId: number): Palm {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Palm(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Fuse extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'FUSE', 'Fuse')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Fuse } = {}\r\n\r\n  public static onChain(chainId: number): Fuse {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Fuse(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Telos extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'TLOS', 'Telos')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Telos } = {}\r\n\r\n  public static onChain(chainId: number): Telos {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Telos(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Glmr extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'GLMR', 'Glimmer')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Glmr } = {}\r\n\r\n  public static onChain(chainId: number): Glmr {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Glmr(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Kava extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'KAVA', 'Kava')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Kava } = {}\r\n\r\n  public static onChain(chainId: number): Kava {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Kava(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Metis extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'METIS', 'Metis')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Metis } = {}\r\n\r\n  public static onChain(chainId: number): Metis {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Metis(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import {\r\n  Avalanche,\r\n  Binance,\r\n  Celo,\r\n  Ether,\r\n  Fantom,\r\n  Fuse,\r\n  Glmr,\r\n  Harmony,\r\n  Heco,\r\n  Kava,\r\n  Matic,\r\n  Movr,\r\n  Okex,\r\n  Palm,\r\n  Telos,\r\n  xDai,\r\n  Metis,\r\n} from '../entities/Native'\r\n\r\nimport { ChainId } from '../enums'\r\nimport { NativeMap } from '../types'\r\n\r\nexport const NATIVE: NativeMap = {\r\n  [ChainId.MAINNET]: Ether.onChain(ChainId.MAINNET),\r\n}\r\n","import JSBI from 'jsbi'\r\n\r\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\r\n\r\n// exports for internal consumption\r\nexport const ZERO = JSBI.BigInt(0)\r\nexport const ONE = JSBI.BigInt(1)\r\nexport const TWO = JSBI.BigInt(2)\r\nexport const THREE = JSBI.BigInt(3)\r\nexport const FIVE = JSBI.BigInt(5)\r\nexport const TEN = JSBI.BigInt(10)\r\nexport const _100 = JSBI.BigInt(100)\r\nexport const _997 = JSBI.BigInt(997)\r\nexport const _1000 = JSBI.BigInt(1000)\r\n\r\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)","import JSBI from 'jsbi'\r\nimport { SolidityType } from \"../enums/SolidityType\";\r\n\r\nexport const SOLIDITY_TYPE_MAXIMA = {\r\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\r\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'),\r\n}","// see https://stackoverflow.com/a/41102306\r\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\r\n\r\n/**\r\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\r\n * obtained by sending any amount of input.\r\n */\r\nexport class InsufficientReservesError extends Error {\r\n  public readonly isInsufficientReservesError: true = true\r\n\r\n  public constructor() {\r\n    super()\r\n    this.name = this.constructor.name\r\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\r\n  }\r\n}\r\n\r\n/**\r\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\r\n * than the price of a single unit of output after fees.\r\n */\r\nexport class InsufficientInputAmountError extends Error {\r\n  public readonly isInsufficientInputAmountError: true = true\r\n\r\n  public constructor() {\r\n    super()\r\n    this.name = this.constructor.name\r\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\r\n  }\r\n}\r\n","import _Big, { RoundingMode } from 'big.js'\r\n\r\nimport { BigintIsh } from '../types'\r\nimport JSBI from 'jsbi'\r\nimport { Rounding } from '../enums'\r\nimport _Decimal from 'decimal.js-light'\r\nimport invariant from 'tiny-invariant'\r\nimport toFormat from 'toformat'\r\n\r\nconst Decimal = toFormat(_Decimal)\r\nconst Big = toFormat(_Big)\r\n\r\nBig.strict = true\r\n\r\nconst toSignificantRounding = {\r\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\r\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\r\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP,\r\n}\r\n\r\nconst toFixedRounding = {\r\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\r\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\r\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp,\r\n}\r\n\r\nexport class Fraction {\r\n  public readonly numerator: JSBI\r\n  public readonly denominator: JSBI\r\n\r\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\r\n    this.numerator = JSBI.BigInt(numerator)\r\n    this.denominator = JSBI.BigInt(denominator)\r\n  }\r\n\r\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\r\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\r\n      return new Fraction(fractionish)\r\n\r\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\r\n    throw new Error('Could not parse fraction')\r\n  }\r\n\r\n  // performs floor division\r\n  public get quotient(): JSBI {\r\n    return JSBI.divide(this.numerator, this.denominator)\r\n  }\r\n\r\n  // remainder after floor division\r\n  public get remainder(): Fraction {\r\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\r\n  }\r\n\r\n  public invert(): Fraction {\r\n    return new Fraction(this.denominator, this.numerator)\r\n  }\r\n\r\n  public add(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\r\n    }\r\n    return new Fraction(\r\n      JSBI.add(\r\n        JSBI.multiply(this.numerator, otherParsed.denominator),\r\n        JSBI.multiply(otherParsed.numerator, this.denominator)\r\n      ),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public subtract(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\r\n    }\r\n    return new Fraction(\r\n      JSBI.subtract(\r\n        JSBI.multiply(this.numerator, otherParsed.denominator),\r\n        JSBI.multiply(otherParsed.numerator, this.denominator)\r\n      ),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public lessThan(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return JSBI.lessThan(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public equalTo(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return JSBI.equal(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public greaterThan(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return JSBI.greaterThan(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public multiply(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return new Fraction(\r\n      JSBI.multiply(this.numerator, otherParsed.numerator),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public divide(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return new Fraction(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(this.denominator, otherParsed.numerator)\r\n    )\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits: number,\r\n    format: object = { groupSeparator: '' },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP\r\n  ): string {\r\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\r\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\r\n\r\n    Decimal.set({\r\n      precision: significantDigits + 1,\r\n      rounding: toSignificantRounding[rounding],\r\n    })\r\n    const quotient = new Decimal(this.numerator.toString())\r\n      .div(this.denominator.toString())\r\n      .toSignificantDigits(significantDigits)\r\n    return quotient.toFormat(quotient.decimalPlaces(), format)\r\n  }\r\n\r\n  public toFixed(\r\n    decimalPlaces: number,\r\n    format: object = { groupSeparator: '' },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP\r\n  ): string {\r\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\r\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\r\n\r\n    Big.DP = decimalPlaces\r\n    Big.RM = toFixedRounding[rounding]\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\r\n  }\r\n\r\n  /**\r\n   * Helper method for converting any super class back to a fraction\r\n   */\r\n  public get asFraction(): Fraction {\r\n    return new Fraction(this.numerator, this.denominator)\r\n  }\r\n}\r\n","import { BigintIsh } from '../types'\r\nimport { Currency } from './Currency'\r\nimport { Fraction } from './Fraction'\r\nimport JSBI from 'jsbi'\r\nimport { MaxUint256 } from '../constants'\r\nimport { Rounding } from '../enums'\r\nimport { Token } from './Token'\r\nimport _Big from 'big.js'\r\nimport invariant from 'tiny-invariant'\r\nimport toFormat from 'toformat'\r\n\r\nconst Big = toFormat(_Big)\r\n\r\nBig.strict = true\r\n\r\nexport class CurrencyAmount<T extends Currency> extends Fraction {\r\n  public readonly currency: T\r\n  public readonly decimalScale: JSBI\r\n\r\n  /**\r\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\r\n   * @param currency the currency in the amount\r\n   * @param rawAmount the raw token or ether amount\r\n   */\r\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\r\n    return new CurrencyAmount(currency, rawAmount)\r\n  }\r\n\r\n  /**\r\n   * Construct a currency amount with a denominator that is not equal to 1\r\n   * @param currency the currency\r\n   * @param numerator the numerator of the fractional token amount\r\n   * @param denominator the denominator of the fractional token amount\r\n   */\r\n  public static fromFractionalAmount<T extends Currency>(\r\n    currency: T,\r\n    numerator: BigintIsh,\r\n    denominator: BigintIsh\r\n  ): CurrencyAmount<T> {\r\n    return new CurrencyAmount(currency, numerator, denominator)\r\n  }\r\n\r\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\r\n    super(numerator, denominator)\r\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\r\n    this.currency = currency\r\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\r\n  }\r\n\r\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\r\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\r\n    const added = super.add(other)\r\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\r\n  }\r\n\r\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\r\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\r\n    const subtracted = super.subtract(other)\r\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\r\n  }\r\n\r\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\r\n    const multiplied = super.multiply(other)\r\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\r\n  }\r\n\r\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\r\n    const divided = super.divide(other)\r\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits: number = 6,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN\r\n  ): string {\r\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(\r\n    decimalPlaces: number = this.currency.decimals,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN\r\n  ): string {\r\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\r\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\r\n  }\r\n\r\n  public toExact(format: object = { groupSeparator: '' }): string {\r\n    Big.DP = this.currency.decimals\r\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\r\n  }\r\n\r\n  public get wrapped(): CurrencyAmount<Token> {\r\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\r\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\r\n  }\r\n\r\n  /**\r\n   * Returns a string representation of the address and currency amount.\r\n   * Useful in cases where a dependency is needed to detect changes (e.g. useEffect).\r\n   * @return string [0x6B3595068778DD592e39A122f4f5a5cF09C90fE2 - 1323.94]\r\n   */\r\n  public serialize(): string {\r\n    return `[${this.currency.wrapped.address} - ${this.toExact()}]`\r\n  }\r\n}\r\n","import { BigintIsh } from '../types'\r\nimport { Currency } from './Currency'\r\nimport { CurrencyAmount } from './CurrencyAmount'\r\nimport { Fraction } from './Fraction'\r\nimport JSBI from 'jsbi'\r\nimport { Rounding } from '../enums'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\r\n  public readonly baseCurrency: TBase // input i.e. denominator\r\n  public readonly quoteCurrency: TQuote // output i.e. numerator\r\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\r\n\r\n  /**\r\n   * Construct a price, either with the base and quote currency amount, or the\r\n   * @param args\r\n   */\r\n  public constructor(\r\n    ...args:\r\n      | [TBase, TQuote, BigintIsh, BigintIsh]\r\n      | [\r\n          {\r\n            baseAmount: CurrencyAmount<TBase>\r\n            quoteAmount: CurrencyAmount<TQuote>\r\n          }\r\n        ]\r\n  ) {\r\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh\r\n\r\n    if (args.length === 4) {\r\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\r\n    } else {\r\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\r\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\r\n        args[0].baseAmount.currency,\r\n        args[0].quoteAmount.currency,\r\n        result.denominator,\r\n        result.numerator,\r\n      ]\r\n    }\r\n    super(numerator, denominator)\r\n\r\n    this.baseCurrency = baseCurrency\r\n    this.quoteCurrency = quoteCurrency\r\n    this.scalar = new Fraction(\r\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\r\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Flip the price, switching the base and quote currency\r\n   */\r\n  public invert(): Price<TQuote, TBase> {\r\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\r\n  }\r\n\r\n  /**\r\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\r\n   * @param other the other price\r\n   */\r\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\r\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\r\n    const fraction = super.multiply(other)\r\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\r\n  }\r\n\r\n  /**\r\n   * Return the amount of quote currency corresponding to a given amount of the base currency\r\n   * @param currencyAmount the amount of base currency to quote against the price\r\n   */\r\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\r\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\r\n    const result = super.multiply(currencyAmount)\r\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\r\n  }\r\n\r\n  /**\r\n   * Get the value scaled by decimals for formatting\r\n   * @private\r\n   */\r\n  private get adjustedForDecimals(): Fraction {\r\n    return super.multiply(this.scalar)\r\n  }\r\n\r\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\r\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\r\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\r\n  }\r\n}\r\n","import { keccak256, pack } from '@ethersproject/solidity'\r\n\r\nimport { INIT_CODE_HASH } from '../constants'\r\nimport { Token } from '../entities/Token'\r\nimport { getCreate2Address } from '@ethersproject/address'\r\n\r\nexport const computePairAddress = ({\r\n  factoryAddress,\r\n  tokenA,\r\n  tokenB,\r\n}: {\r\n  factoryAddress: string\r\n  tokenA: Token\r\n  tokenB: Token\r\n}): string => {\r\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\r\n  return getCreate2Address(\r\n    factoryAddress,\r\n    keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]),\r\n    INIT_CODE_HASH[token0.chainId]\r\n  )\r\n}\r\n","import { ONE, TWO, ZERO } from '../constants/numbers'\r\n\r\nimport JSBI from 'jsbi'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\r\n\r\n/**\r\n * Computes floor(sqrt(value))\r\n * @param value the value for which to compute the square root, rounded down\r\n */\r\nexport function sqrt(value: JSBI): JSBI {\r\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\r\n\r\n  // rely on built in sqrt if possible\r\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\r\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\r\n  }\r\n\r\n  let z: JSBI\r\n  let x: JSBI\r\n  z = value\r\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\r\n  while (JSBI.lessThan(x, z)) {\r\n    z = x\r\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\r\n  }\r\n  return z\r\n}\r\n\r\n/**\r\n * Returns the smallest member of the array\r\n * @param values the values from which the smallest gets returned\r\n * @returns the smallest memmber of the array\r\n */\r\nexport function minimum(...values: JSBI[]): JSBI {\r\n  let lowest = values[0]\r\n  for (let i = 1; i < values.length; i++) {\r\n    const value = values[i]\r\n    if (JSBI.LT(value, lowest)) {\r\n      lowest = value\r\n    }\r\n  }\r\n  return lowest\r\n}\r\n\r\n/**\r\n * Returns the biggest member of the array\r\n * @param values the values from which the biggest gets returned\r\n * @returns the biggest memmber of the array\r\n */\r\nexport function maximum(...values: JSBI[]): JSBI {\r\n  let highest = values[0]\r\n  for (let i = 1; i < values.length; i++) {\r\n    const value = values[i]\r\n    if (JSBI.GT(value, highest)) {\r\n      highest = value\r\n    }\r\n  }\r\n  return highest\r\n}\r\n\r\nexport function difference(a: JSBI, b: JSBI): JSBI {\r\n  if (JSBI.greaterThan(a, b)) {\r\n    return JSBI.subtract(a, b)\r\n  }\r\n  return JSBI.subtract(b, a)\r\n}\r\n","import { FACTORY_ADDRESS, FIVE, MINIMUM_LIQUIDITY, ONE, ZERO, _1000, _997 } from '../constants'\r\nimport { InsufficientInputAmountError, InsufficientReservesError } from '../errors'\r\n\r\nimport { BigintIsh } from '../types'\r\nimport { CurrencyAmount } from './CurrencyAmount'\r\nimport JSBI from 'jsbi'\r\nimport { Price } from './Price'\r\nimport { Token } from './Token'\r\nimport { computePairAddress } from '../functions/computePairAddress'\r\nimport invariant from 'tiny-invariant'\r\nimport { sqrt } from '../functions/math'\r\n\r\nexport class Pair {\r\n  public readonly liquidityToken: Token\r\n  private readonly tokenAmounts: [CurrencyAmount<Token>, CurrencyAmount<Token>]\r\n\r\n  public static getAddress(tokenA: Token, tokenB: Token): string {\r\n    return computePairAddress({\r\n      factoryAddress: FACTORY_ADDRESS[tokenA.chainId],\r\n      tokenA,\r\n      tokenB,\r\n    })\r\n  }\r\n\r\n  public constructor(currencyAmountA: CurrencyAmount<Token>, currencyAmountB: CurrencyAmount<Token>) {\r\n    const currencyAmounts = currencyAmountA.currency.sortsBefore(currencyAmountB.currency) // does safety checks\r\n      ? [currencyAmountA, currencyAmountB]\r\n      : [currencyAmountB, currencyAmountA]\r\n    this.liquidityToken = new Token(\r\n      currencyAmounts[0].currency.chainId,\r\n      Pair.getAddress(currencyAmounts[0].currency, currencyAmounts[1].currency),\r\n      18,\r\n      'RICE-V2',\r\n      'Riceswap V2'\r\n    )\r\n    this.tokenAmounts = currencyAmounts as [CurrencyAmount<Token>, CurrencyAmount<Token>]\r\n  }\r\n\r\n  /**\r\n   * Returns true if the token is either token0 or token1\r\n   * @param token to check\r\n   */\r\n  public involvesToken(token: Token): boolean {\r\n    return token.equals(this.token0) || token.equals(this.token1)\r\n  }\r\n\r\n  /**\r\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\r\n   */\r\n  public get token0Price(): Price<Token, Token> {\r\n    const result = this.tokenAmounts[1].divide(this.tokenAmounts[0])\r\n    return new Price(this.token0, this.token1, result.denominator, result.numerator)\r\n  }\r\n\r\n  /**\r\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\r\n   */\r\n  public get token1Price(): Price<Token, Token> {\r\n    const result = this.tokenAmounts[0].divide(this.tokenAmounts[1])\r\n    return new Price(this.token1, this.token0, result.denominator, result.numerator)\r\n  }\r\n\r\n  /**\r\n   * Return the price of the given token in terms of the other token in the pair.\r\n   * @param token token to return price of\r\n   */\r\n  public priceOf(token: Token): Price<Token, Token> {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\r\n  }\r\n\r\n  /**\r\n   * Returns the chain ID of the tokens in the pair.\r\n   */\r\n  public get chainId(): number {\r\n    return this.token0.chainId\r\n  }\r\n\r\n  public get token0(): Token {\r\n    return this.tokenAmounts[0].currency\r\n  }\r\n\r\n  public get token1(): Token {\r\n    return this.tokenAmounts[1].currency\r\n  }\r\n\r\n  public get reserve0(): CurrencyAmount<Token> {\r\n    return this.tokenAmounts[0]\r\n  }\r\n\r\n  public get reserve1(): CurrencyAmount<Token> {\r\n    return this.tokenAmounts[1]\r\n  }\r\n\r\n  public reserveOf(token: Token): CurrencyAmount<Token> {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\r\n  }\r\n\r\n  public getOutputAmount(inputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\r\n    invariant(this.involvesToken(inputAmount.currency), 'TOKEN')\r\n    if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO)) {\r\n      throw new InsufficientReservesError()\r\n    }\r\n    const inputReserve = this.reserveOf(inputAmount.currency)\r\n    const outputReserve = this.reserveOf(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\r\n    const inputAmountWithFee = JSBI.multiply(inputAmount.quotient, _997)\r\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.quotient)\r\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, _1000), inputAmountWithFee)\r\n    const outputAmount = CurrencyAmount.fromRawAmount(\r\n      inputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\r\n      JSBI.divide(numerator, denominator)\r\n    )\r\n    if (JSBI.equal(outputAmount.quotient, ZERO)) {\r\n      throw new InsufficientInputAmountError()\r\n    }\r\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\r\n  }\r\n\r\n  public getInputAmount(outputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\r\n    invariant(this.involvesToken(outputAmount.currency), 'TOKEN')\r\n    if (\r\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\r\n      JSBI.equal(this.reserve1.quotient, ZERO) ||\r\n      JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.currency).quotient)\r\n    ) {\r\n      throw new InsufficientReservesError()\r\n    }\r\n\r\n    const outputReserve = this.reserveOf(outputAmount.currency)\r\n    const inputReserve = this.reserveOf(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\r\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.quotient, outputAmount.quotient), _1000)\r\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.quotient, outputAmount.quotient), _997)\r\n    const inputAmount = CurrencyAmount.fromRawAmount(\r\n      outputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\r\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\r\n    )\r\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\r\n  }\r\n\r\n  public getLiquidityMinted(\r\n    totalSupply: CurrencyAmount<Token>,\r\n    tokenAmountA: CurrencyAmount<Token>,\r\n    tokenAmountB: CurrencyAmount<Token>\r\n  ): CurrencyAmount<Token> {\r\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'LIQUIDITY')\r\n    const tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\r\n      ? [tokenAmountA, tokenAmountB]\r\n      : [tokenAmountB, tokenAmountA]\r\n    invariant(tokenAmounts[0].currency.equals(this.token0) && tokenAmounts[1].currency.equals(this.token1), 'TOKEN')\r\n\r\n    let liquidity: JSBI\r\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\r\n      liquidity = JSBI.subtract(\r\n        sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)),\r\n        MINIMUM_LIQUIDITY\r\n      )\r\n    } else {\r\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient), this.reserve0.quotient)\r\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient), this.reserve1.quotient)\r\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\r\n\r\n      console.log({\r\n        amount0: amount0.toString(),\r\n        amount1: amount1.toString(),\r\n        liquidity: liquidity.toString(),\r\n        totalSupply: totalSupply.quotient.toString(),\r\n        kLast: sqrt(JSBI.multiply(this.tokenAmounts[0].quotient, this.tokenAmounts[1].quotient)),\r\n      })\r\n    }\r\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\r\n      throw new InsufficientInputAmountError()\r\n    }\r\n\r\n    return CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity)\r\n  }\r\n\r\n  public getLiquidityValue(\r\n    token: Token,\r\n    totalSupply: CurrencyAmount<Token>,\r\n    liquidity: CurrencyAmount<Token>,\r\n    feeOn: boolean = false,\r\n    kLast?: BigintIsh\r\n  ): CurrencyAmount<Token> {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'TOTAL_SUPPLY')\r\n    invariant(liquidity.currency.equals(this.liquidityToken), 'LIQUIDITY')\r\n    invariant(JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient), 'LIQUIDITY')\r\n\r\n    let totalSupplyAdjusted: CurrencyAmount<Token>\r\n    if (!feeOn) {\r\n      totalSupplyAdjusted = totalSupply\r\n    } else {\r\n      invariant(!!kLast, 'K_LAST')\r\n      const kLastParsed = JSBI.BigInt(kLast)\r\n      if (!JSBI.equal(kLastParsed, ZERO)) {\r\n        const rootK = sqrt(JSBI.multiply(this.reserve0.quotient, this.reserve1.quotient))\r\n        const rootKLast = sqrt(kLastParsed)\r\n        if (JSBI.greaterThan(rootK, rootKLast)) {\r\n          const numerator = JSBI.multiply(totalSupply.quotient, JSBI.subtract(rootK, rootKLast))\r\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\r\n          const feeLiquidity = JSBI.divide(numerator, denominator)\r\n          totalSupplyAdjusted = totalSupply.add(CurrencyAmount.fromRawAmount(this.liquidityToken, feeLiquidity))\r\n        } else {\r\n          totalSupplyAdjusted = totalSupply\r\n        }\r\n      } else {\r\n        totalSupplyAdjusted = totalSupply\r\n      }\r\n    }\r\n\r\n    return CurrencyAmount.fromRawAmount(\r\n      token,\r\n      JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupplyAdjusted.quotient)\r\n    )\r\n  }\r\n}\r\n","import { BigintIsh } from '../types'\r\nimport { Fraction } from './Fraction'\r\nimport JSBI from 'jsbi'\r\nimport { Rounding } from '../enums'\r\n\r\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\r\n\r\n/**\r\n * Converts a fraction to a percent\r\n * @param fraction the fraction to convert\r\n */\r\nfunction toPercent(fraction: Fraction): Percent {\r\n  return new Percent(fraction.numerator, fraction.denominator)\r\n}\r\n\r\nexport class Percent extends Fraction {\r\n  /**\r\n   * This boolean prevents a fraction from being interpreted as a Percent\r\n   */\r\n  public readonly isPercent: true = true\r\n\r\n  add(other: Fraction | BigintIsh): Percent {\r\n    return toPercent(super.add(other))\r\n  }\r\n\r\n  subtract(other: Fraction | BigintIsh): Percent {\r\n    return toPercent(super.subtract(other))\r\n  }\r\n\r\n  multiply(other: Fraction | BigintIsh): Percent {\r\n    return toPercent(super.multiply(other))\r\n  }\r\n\r\n  divide(other: Fraction | BigintIsh): Percent {\r\n    return toPercent(super.divide(other))\r\n  }\r\n\r\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\r\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\r\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\r\n  }\r\n}\r\n","import { Currency } from './Currency'\r\nimport { Pair } from './Pair'\r\nimport { Price } from './Price'\r\nimport { Token } from './Token'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Route<TInput extends Currency, TOutput extends Currency> {\r\n  public readonly pairs: Pair[]\r\n  public readonly path: Token[]\r\n  public readonly input: TInput\r\n  public readonly output: TOutput\r\n\r\n  public constructor(pairs: Pair[], input: TInput, output: TOutput) {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    const chainId: number = pairs[0].chainId\r\n    invariant(\r\n      pairs.every((pair) => pair.chainId === chainId),\r\n      'CHAIN_IDS'\r\n    )\r\n\r\n    const wrappedInput = input.wrapped\r\n    invariant(pairs[0].involvesToken(wrappedInput), 'INPUT')\r\n    invariant(typeof output === 'undefined' || pairs[pairs.length - 1].involvesToken(output.wrapped), 'OUTPUT')\r\n\r\n    const path: Token[] = [wrappedInput]\r\n    for (const [i, pair] of pairs.entries()) {\r\n      const currentInput = path[i]\r\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\r\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\r\n      path.push(output)\r\n    }\r\n\r\n    this.pairs = pairs\r\n    this.path = path\r\n    this.input = input\r\n    this.output = output\r\n  }\r\n\r\n  private _midPrice: Price<TInput, TOutput> | null = null\r\n\r\n  public get midPrice(): Price<TInput, TOutput> {\r\n    if (this._midPrice !== null) return this._midPrice\r\n    const prices: Price<Currency, Currency>[] = []\r\n    for (const [i, pair] of this.pairs.entries()) {\r\n      prices.push(\r\n        this.path[i].equals(pair.token0)\r\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.quotient, pair.reserve1.quotient)\r\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.quotient, pair.reserve0.quotient)\r\n      )\r\n    }\r\n    const reduced = prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\r\n    return (this._midPrice = new Price(this.input, this.output, reduced.denominator, reduced.numerator))\r\n  }\r\n\r\n  public get chainId(): number {\r\n    return this.pairs[0].chainId\r\n  }\r\n}\r\n","import { Currency } from '../entities/Currency'\r\nimport { CurrencyAmount } from '../entities/CurrencyAmount'\r\nimport { Percent } from '../entities/Percent'\r\nimport { Price } from '../entities/Price'\r\n\r\n/**\r\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\r\n * @param midPrice mid price before the trade\r\n * @param inputAmount the input amount of the trade\r\n * @param outputAmount the output amount of the trade\r\n */\r\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\r\n  midPrice: Price<TBase, TQuote>,\r\n  inputAmount: CurrencyAmount<TBase>,\r\n  outputAmount: CurrencyAmount<TQuote>\r\n): Percent {\r\n  const quotedOutputAmount = midPrice.quote(inputAmount)\r\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\r\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\r\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\r\n}\r\n","import invariant from 'tiny-invariant'\r\n\r\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\r\n// `maxSize` by removing the last item\r\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\r\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\r\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\r\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\r\n\r\n  // short circuit first item add\r\n  if (items.length === 0) {\r\n    items.push(add)\r\n    return null\r\n  } else {\r\n    const isFull = items.length === maxSize\r\n    // short circuit if full and the additional item does not come before the last item\r\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\r\n      return add\r\n    }\r\n\r\n    let lo = 0,\r\n      hi = items.length\r\n\r\n    while (lo < hi) {\r\n      const mid = (lo + hi) >>> 1\r\n      if (comparator(items[mid], add) <= 0) {\r\n        lo = mid + 1\r\n      } else {\r\n        hi = mid\r\n      }\r\n    }\r\n    items.splice(lo, 0, add)\r\n    return isFull ? items.pop()! : null\r\n  }\r\n}\r\n","import { ONE, ZERO } from '../constants'\r\n\r\nimport { Currency } from './Currency'\r\nimport { CurrencyAmount } from './CurrencyAmount'\r\nimport { Fraction } from './Fraction'\r\nimport { Pair } from './Pair'\r\nimport { Percent } from './Percent'\r\nimport { Price } from './Price'\r\nimport { Route } from './Route'\r\nimport { Token } from './Token'\r\nimport { TradeType } from '../enums/TradeType'\r\nimport { computePriceImpact } from '../functions/computePriceImpact'\r\nimport invariant from 'tiny-invariant'\r\nimport { sortedInsert } from '../functions/sortedInsert'\r\n\r\n// minimal interface so the input output comparator may be shared across types\r\ninterface InputOutput<TInput extends Currency, TOutput extends Currency> {\r\n  readonly inputAmount: CurrencyAmount<TInput>\r\n  readonly outputAmount: CurrencyAmount<TOutput>\r\n}\r\n\r\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\r\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\r\nexport function inputOutputComparator<TInput extends Currency, TOutput extends Currency>(\r\n  a: InputOutput<TInput, TOutput>,\r\n  b: InputOutput<TInput, TOutput>\r\n): number {\r\n  // must have same input and output token for comparison\r\n  invariant(a.inputAmount.currency.equals(b.inputAmount.currency), 'INPUT_CURRENCY')\r\n  invariant(a.outputAmount.currency.equals(b.outputAmount.currency), 'OUTPUT_CURRENCY')\r\n  if (a.outputAmount.equalTo(b.outputAmount)) {\r\n    if (a.inputAmount.equalTo(b.inputAmount)) {\r\n      return 0\r\n    }\r\n    // trade A requires less input than trade B, so A should come first\r\n    if (a.inputAmount.lessThan(b.inputAmount)) {\r\n      return -1\r\n    } else {\r\n      return 1\r\n    }\r\n  } else {\r\n    // tradeA has less output than trade B, so should come second\r\n    if (a.outputAmount.lessThan(b.outputAmount)) {\r\n      return 1\r\n    } else {\r\n      return -1\r\n    }\r\n  }\r\n}\r\n\r\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\r\nexport function tradeComparator<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\r\n  a: Trade<TInput, TOutput, TTradeType>,\r\n  b: Trade<TInput, TOutput, TTradeType>\r\n) {\r\n  const ioComp = inputOutputComparator(a, b)\r\n  if (ioComp !== 0) {\r\n    return ioComp\r\n  }\r\n\r\n  // consider lowest slippage next, since these are less likely to fail\r\n  if (a.priceImpact.lessThan(b.priceImpact)) {\r\n    return -1\r\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\r\n    return 1\r\n  }\r\n\r\n  // finally consider the number of hops since each hop costs gas\r\n  return a.route.path.length - b.route.path.length\r\n}\r\n\r\nexport interface BestTradeOptions {\r\n  // how many results to return\r\n  maxNumResults?: number\r\n  // the maximum number of hops a trade should contain\r\n  maxHops?: number\r\n}\r\n\r\n/**\r\n * Represents a trade executed against a list of pairs.\r\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\r\n */\r\nexport class Trade<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\r\n  /**\r\n   * The route of the trade, i.e. which pairs the trade goes through and the input/output currencies.\r\n   */\r\n  public readonly route: Route<TInput, TOutput>\r\n  /**\r\n   * The type of the trade, either exact in or exact out.\r\n   */\r\n  public readonly tradeType: TTradeType\r\n  /**\r\n   * The input amount for the trade assuming no slippage.\r\n   */\r\n  public readonly inputAmount: CurrencyAmount<TInput>\r\n  /**\r\n   * The output amount for the trade assuming no slippage.\r\n   */\r\n  public readonly outputAmount: CurrencyAmount<TOutput>\r\n  /**\r\n   * The price expressed in terms of output amount/input amount.\r\n   */\r\n  public readonly executionPrice: Price<TInput, TOutput>\r\n  /**\r\n   * The percent difference between the mid price before the trade and the trade execution price.\r\n   */\r\n  public readonly priceImpact: Percent\r\n\r\n  /**\r\n   * Constructs an exact in trade with the given amount in and route\r\n   * @param route route of the exact in trade\r\n   * @param amountIn the amount being passed in\r\n   */\r\n  public static exactIn<TInput extends Currency, TOutput extends Currency>(\r\n    route: Route<TInput, TOutput>,\r\n    amountIn: CurrencyAmount<TInput>\r\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT> {\r\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\r\n  }\r\n\r\n  /**\r\n   * Constructs an exact out trade with the given amount out and route\r\n   * @param route route of the exact out trade\r\n   * @param amountOut the amount returned by the trade\r\n   */\r\n  public static exactOut<TInput extends Currency, TOutput extends Currency>(\r\n    route: Route<TInput, TOutput>,\r\n    amountOut: CurrencyAmount<TOutput>\r\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT> {\r\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\r\n  }\r\n\r\n  public constructor(\r\n    route: Route<TInput, TOutput>,\r\n    amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>,\r\n    tradeType: TTradeType\r\n  ) {\r\n    this.route = route\r\n    this.tradeType = tradeType\r\n\r\n    const tokenAmounts: CurrencyAmount<Token>[] = new Array(route.path.length)\r\n    if (tradeType === TradeType.EXACT_INPUT) {\r\n      invariant(amount.currency.equals(route.input), 'INPUT')\r\n      tokenAmounts[0] = amount.wrapped\r\n      for (let i = 0; i < route.path.length - 1; i++) {\r\n        const pair = route.pairs[i]\r\n        const [outputAmount] = pair.getOutputAmount(tokenAmounts[i])\r\n        tokenAmounts[i + 1] = outputAmount\r\n      }\r\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\r\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(\r\n        route.output,\r\n        tokenAmounts[tokenAmounts.length - 1].numerator,\r\n        tokenAmounts[tokenAmounts.length - 1].denominator\r\n      )\r\n    } else {\r\n      invariant(amount.currency.equals(route.output), 'OUTPUT')\r\n      tokenAmounts[tokenAmounts.length - 1] = amount.wrapped\r\n      for (let i = route.path.length - 1; i > 0; i--) {\r\n        const pair = route.pairs[i - 1]\r\n        const [inputAmount] = pair.getInputAmount(tokenAmounts[i])\r\n        tokenAmounts[i - 1] = inputAmount\r\n      }\r\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(\r\n        route.input,\r\n        tokenAmounts[0].numerator,\r\n        tokenAmounts[0].denominator\r\n      )\r\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator)\r\n    }\r\n    this.executionPrice = new Price(\r\n      this.inputAmount.currency,\r\n      this.outputAmount.currency,\r\n      this.inputAmount.quotient,\r\n      this.outputAmount.quotient\r\n    )\r\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\r\n  }\r\n\r\n  /**\r\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */\r\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount<TOutput> {\r\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\r\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\r\n      return this.outputAmount\r\n    } else {\r\n      const slippageAdjustedAmountOut = new Fraction(ONE)\r\n        .add(slippageTolerance)\r\n        .invert()\r\n        .multiply(this.outputAmount.quotient).quotient\r\n      return CurrencyAmount.fromRawAmount(this.outputAmount.currency, slippageAdjustedAmountOut)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */\r\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount<TInput> {\r\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\r\n    if (this.tradeType === TradeType.EXACT_INPUT) {\r\n      return this.inputAmount\r\n    } else {\r\n      const slippageAdjustedAmountIn = new Fraction(ONE)\r\n        .add(slippageTolerance)\r\n        .multiply(this.inputAmount.quotient).quotient\r\n      return CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\r\n   * amount to an output token, making at most `maxHops` hops.\r\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param nextAmountIn exact amount of input currency to spend\r\n   * @param currencyOut the desired currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param currencyAmountIn used in recursion; the original value of the currencyAmountIn parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */\r\n  public static bestTradeExactIn<TInput extends Currency, TOutput extends Currency>(\r\n    pairs: Pair[],\r\n    currencyAmountIn: CurrencyAmount<TInput>,\r\n    currencyOut: TOutput,\r\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\r\n    // used in recursion.\r\n    currentPairs: Pair[] = [],\r\n    nextAmountIn: CurrencyAmount<Currency> = currencyAmountIn,\r\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] = []\r\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    invariant(maxHops > 0, 'MAX_HOPS')\r\n    invariant(currencyAmountIn === nextAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\r\n\r\n    const amountIn = nextAmountIn.wrapped\r\n    const tokenOut = currencyOut.wrapped\r\n    for (let i = 0; i < pairs.length; i++) {\r\n      const pair = pairs[i]\r\n      // pair irrelevant\r\n      if (!pair.token0.equals(amountIn.currency) && !pair.token1.equals(amountIn.currency)) continue\r\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\r\n\r\n      let amountOut: CurrencyAmount<Token>\r\n      try {\r\n        ;[amountOut] = pair.getOutputAmount(amountIn)\r\n      } catch (error) {\r\n        // input too low\r\n        if (error.isInsufficientInputAmountError) {\r\n          continue\r\n        }\r\n        throw error\r\n      }\r\n      // we have arrived at the output token, so this is the final trade of one of the paths\r\n      if (amountOut.currency.equals(tokenOut)) {\r\n        sortedInsert(\r\n          bestTrades,\r\n          new Trade(\r\n            new Route([...currentPairs, pair], currencyAmountIn.currency, currencyOut),\r\n            currencyAmountIn,\r\n            TradeType.EXACT_INPUT\r\n          ),\r\n          maxNumResults,\r\n          tradeComparator\r\n        )\r\n      } else if (maxHops > 1 && pairs.length > 1) {\r\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\r\n\r\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\r\n        Trade.bestTradeExactIn(\r\n          pairsExcludingThisPair,\r\n          currencyAmountIn,\r\n          currencyOut,\r\n          {\r\n            maxNumResults,\r\n            maxHops: maxHops - 1,\r\n          },\r\n          [...currentPairs, pair],\r\n          amountOut,\r\n          bestTrades\r\n        )\r\n      }\r\n    }\r\n\r\n    return bestTrades\r\n  }\r\n\r\n  /**\r\n   * Return the execution price after accounting for slippage tolerance\r\n   * @param slippageTolerance the allowed tolerated slippage\r\n   */\r\n  public worstExecutionPrice(slippageTolerance: Percent): Price<TInput, TOutput> {\r\n    return new Price(\r\n      this.inputAmount.currency,\r\n      this.outputAmount.currency,\r\n      this.maximumAmountIn(slippageTolerance).quotient,\r\n      this.minimumAmountOut(slippageTolerance).quotient\r\n    )\r\n  }\r\n\r\n  /**\r\n   * similar to the above method but instead targets a fixed output amount\r\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\r\n   * to an output token amount, making at most `maxHops` hops\r\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param currencyIn the currency to spend\r\n   * @param nextAmountOut the exact amount of currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param currencyAmountOut used in recursion; the original value of the currencyAmountOut parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */\r\n  public static bestTradeExactOut<TInput extends Currency, TOutput extends Currency>(\r\n    pairs: Pair[],\r\n    currencyIn: TInput,\r\n    currencyAmountOut: CurrencyAmount<TOutput>,\r\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\r\n    // used in recursion.\r\n    currentPairs: Pair[] = [],\r\n    nextAmountOut: CurrencyAmount<Currency> = currencyAmountOut,\r\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] = []\r\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    invariant(maxHops > 0, 'MAX_HOPS')\r\n    invariant(currencyAmountOut === nextAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\r\n\r\n    const amountOut = nextAmountOut.wrapped\r\n    const tokenIn = currencyIn.wrapped\r\n    for (let i = 0; i < pairs.length; i++) {\r\n      const pair = pairs[i]\r\n      // pair irrelevant\r\n      if (!pair.token0.equals(amountOut.currency) && !pair.token1.equals(amountOut.currency)) continue\r\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\r\n\r\n      let amountIn: CurrencyAmount<Token>\r\n      try {\r\n        ;[amountIn] = pair.getInputAmount(amountOut)\r\n      } catch (error) {\r\n        // not enough liquidity in this pair\r\n        if (error.isInsufficientReservesError) {\r\n          continue\r\n        }\r\n        throw error\r\n      }\r\n      // we have arrived at the input token, so this is the first trade of one of the paths\r\n      if (amountIn.currency.equals(tokenIn)) {\r\n        sortedInsert(\r\n          bestTrades,\r\n          new Trade(\r\n            new Route([pair, ...currentPairs], currencyIn, currencyAmountOut.currency),\r\n            currencyAmountOut,\r\n            TradeType.EXACT_OUTPUT\r\n          ),\r\n          maxNumResults,\r\n          tradeComparator\r\n        )\r\n      } else if (maxHops > 1 && pairs.length > 1) {\r\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\r\n\r\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\r\n        Trade.bestTradeExactOut(\r\n          pairsExcludingThisPair,\r\n          currencyIn,\r\n          currencyAmountOut,\r\n          {\r\n            maxNumResults,\r\n            maxHops: maxHops - 1,\r\n          },\r\n          [pair, ...currentPairs],\r\n          amountIn,\r\n          bestTrades\r\n        )\r\n      }\r\n    }\r\n\r\n    return bestTrades\r\n  }\r\n}\r\n","import { JsonRpcSigner, Web3Provider } from '@ethersproject/providers'\r\n\r\n// account is not optional\r\nexport function getSigner(library: Web3Provider, account: string): JsonRpcSigner {\r\n  return library.getSigner(account).connectUnchecked()\r\n}\r\n\r\n// account is optional\r\nexport function getProviderOrSigner(library: Web3Provider, account?: string): Web3Provider | JsonRpcSigner {\r\n  return account ? getSigner(library, account) : library\r\n}\r\n","import { Currency } from './entities/Currency'\r\nimport { CurrencyAmount } from './entities/CurrencyAmount'\r\nimport { Percent } from './entities/Percent'\r\nimport { Token } from './entities/Token'\r\nimport { Trade } from './entities/Trade'\r\nimport { TradeType } from './enums/TradeType'\r\nimport invariant from 'tiny-invariant'\r\nimport { validateAndParseAddress } from './functions/validateAndParseAddress'\r\n\r\n/**\r\n * Options for producing the arguments to send call to the router.\r\n */\r\nexport interface TradeOptions {\r\n  /**\r\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\r\n   */\r\n  allowedSlippage: Percent\r\n  /**\r\n   * How long the swap is valid until it expires, in seconds.\r\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\r\n   * are generated.\r\n   */\r\n  ttl: number\r\n  /**\r\n   * The account that should receive the output of the swap.\r\n   */\r\n  recipient: string\r\n\r\n  /**\r\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\r\n   */\r\n  feeOnTransfer?: boolean\r\n}\r\n\r\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\r\n  /**\r\n   * When the transaction expires.\r\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\r\n   */\r\n  deadline: number\r\n}\r\n\r\n/**\r\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\r\n */\r\nexport interface SwapParameters {\r\n  /**\r\n   * The method to call on the Uniswap V2 Router.\r\n   */\r\n  methodName: string\r\n  /**\r\n   * The arguments to pass to the method, all hex encoded.\r\n   */\r\n  args: (string | string[])[]\r\n  /**\r\n   * The amount of wei to send in hex.\r\n   */\r\n  value: string\r\n}\r\n\r\nexport function toHex(currencyAmount: CurrencyAmount<Currency>) {\r\n  return `0x${currencyAmount.quotient.toString(16)}`\r\n}\r\n\r\nconst ZERO_HEX = '0x0'\r\n\r\n/**\r\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\r\n */\r\nexport abstract class Router {\r\n  /**\r\n   * Cannot be constructed.\r\n   */\r\n  private constructor() {}\r\n\r\n  /**\r\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\r\n   * @param trade to produce call parameters for\r\n   * @param options options for the call parameters\r\n   */\r\n  public static swapCallParameters(\r\n    trade: Trade<Currency, Currency, TradeType>,\r\n    options: TradeOptions | TradeOptionsDeadline\r\n  ): SwapParameters {\r\n    const etherIn = trade.inputAmount.currency.isNative\r\n    const etherOut = trade.outputAmount.currency.isNative\r\n    // the router does not support both ether in and out\r\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\r\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\r\n\r\n    const to: string = validateAndParseAddress(options.recipient)\r\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\r\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\r\n    const path: string[] = trade.route.path.map((token: Token) => token.address)\r\n    const deadline =\r\n      'ttl' in options\r\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\r\n        : `0x${options.deadline.toString(16)}`\r\n\r\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\r\n\r\n    let methodName: string\r\n    let args: (string | string[])[]\r\n    let value: string\r\n    switch (trade.tradeType) {\r\n      case TradeType.EXACT_INPUT:\r\n        if (etherIn) {\r\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\r\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, path, to, deadline]\r\n          value = amountIn\r\n        } else if (etherOut) {\r\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\r\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = [amountIn, amountOut, path, to, deadline]\r\n          value = ZERO_HEX\r\n        } else {\r\n          methodName = useFeeOnTransfer\r\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\r\n            : 'swapExactTokensForTokens'\r\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = [amountIn, amountOut, path, to, deadline]\r\n          value = ZERO_HEX\r\n        }\r\n        break\r\n      case TradeType.EXACT_OUTPUT:\r\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\r\n        if (etherIn) {\r\n          methodName = 'swapETHForExactTokens'\r\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, path, to, deadline]\r\n          value = amountIn\r\n        } else if (etherOut) {\r\n          methodName = 'swapTokensForExactETH'\r\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, amountIn, path, to, deadline]\r\n          value = ZERO_HEX\r\n        } else {\r\n          methodName = 'swapTokensForExactTokens'\r\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, amountIn, path, to, deadline]\r\n          value = ZERO_HEX\r\n        }\r\n        break\r\n    }\r\n    return {\r\n      methodName,\r\n      args,\r\n      value,\r\n    }\r\n  }\r\n}\r\n","import JSBI from 'jsbi'\r\n\r\nimport { ONE, ZERO } from '../constants'\r\nimport { Rebase } from '../interfaces'\r\n\r\nexport function rebase(value: JSBI, from: JSBI, to: JSBI): JSBI {\r\n  return from ? JSBI.divide(JSBI.multiply(value, to), from) : ZERO\r\n}\r\n\r\nexport function toElastic(total: Rebase, base: JSBI, roundUp: boolean): JSBI {\r\n  let elastic: JSBI\r\n  if (JSBI.equal(total.base, ZERO)) {\r\n    elastic = base\r\n  } else {\r\n    elastic = JSBI.divide(JSBI.multiply(base, total.elastic), total.base)\r\n    if (roundUp && JSBI.lessThan(JSBI.divide(JSBI.multiply(elastic, total.base), total.elastic), base)) {\r\n      elastic = JSBI.add(elastic, ONE)\r\n    }\r\n  }\r\n\r\n  return elastic\r\n}\r\n","import { SOLIDITY_TYPE_MAXIMA, ZERO } from '../constants'\r\nimport { SolidityType } from '../enums'\r\n\r\nimport JSBI from 'jsbi'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\r\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\r\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\r\n}\r\n"],"names":["ChainId","ChainKey","Rounding","SolidityType","TradeType","TradeVersion","RICE_ADDRESS","MAINNET","USDC_ADDRESS","USD_ADDRESS","WETH9_ADDRESS","WNATIVE_ADDRESS","DAI_ADDRESS","USDT_ADDRESS","MIM_ADDRESS","FRAX_ADDRESS","FACTORY_ADDRESS","ROUTER_ADDRESS","MASTERCHEF_ADDRESS","BAR_ADDRESS","MAKER_ADDRESS","TIMELOCK_ADDRESS","BENTOBOX_ADDRESS","KASHI_ADDRESS","SUSHISWAP_SWAPPER_ADDRESS","SUSHISWAP_MULTISWAPPER_ADDRESS","SUSHISWAP_MULTI_EXACT_SWAPPER_ADDRESS","CHAINLINK_ORACLE_ADDRESS","BORING_HELPER_ADDRESS","MINICHEF_ADDRESS","MATIC","MASTERCHEF_V2_ADDRESS","ENS_REGISTRAR_ADDRESS","ZAPPER_ADDRESS","MULTICALL2_ADDRESS","BALANCE_FETCHER_ADDRESS","MULTISIG_ADDRESS","CHAIN_KEY","INIT_CODE_HASH","AbstractCurrency","chainId","decimals","symbol","name","Number","isSafeInteger","invariant","isInteger","this","NativeCurrency","_this","_inheritsLoose","validateAndParseAddress","address","getAddress","error","Token","_proto","equals","other","isToken","sortsBefore","toLowerCase","_createClass","key","get","USDC","WETH9","WNATIVE","RICE","Avalanche","_NativeCurrency","onChain","_cache","isNative","wnative","Binance","Celo","wcelo","Ether","_etherCache","weth9","Fantom","Harmony","Heco","Matic","Movr","Okex","xDai","Palm","Fuse","Telos","Glmr","Kava","Metis","NATIVE","MaxUint256","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_1000","MINIMUM_LIQUIDITY","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","_this2","Decimal","toFormat","_Decimal","Big","_Big","strict","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","tryParseFraction","fractionish","invert","add","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","lessThanOrEqual","decimalScale","exponentiate","fromRawAmount","rawAmount","fromFractionalAmount","added","subtracted","multiplied","divided","_Fraction","toExact","serialize","wrapped","Price","baseCurrency","quoteCurrency","args","length","result","quoteAmount","baseAmount","scalar","fraction","quote","currencyAmount","adjustedForDecimals","computePairAddress","factoryAddress","tokenA","tokenB","token0","getCreate2Address","keccak256","pack","MAX_SAFE_INTEGER","sqrt","value","greaterThanOrEqual","Math","floor","toNumber","z","x","Pair","currencyAmountA","currencyAmountB","currencyAmounts","liquidityToken","tokenAmounts","involvesToken","token","token1","priceOf","token0Price","token1Price","reserveOf","reserve0","reserve1","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","tokenAmountA","tokenAmountB","liquidity","amount0","amount1","console","log","kLast","getLiquidityValue","feeOn","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","ONE_HUNDRED","toPercent","Percent","Route","pairs","input","output","every","pair","wrappedInput","path","entries","currentInput","push","_midPrice","prices","reduced","slice","reduce","accumulator","currentValue","computePriceImpact","midPrice","quotedOutputAmount","priceImpact","sortedInsert","items","maxSize","comparator","isFull","lo","hi","mid","splice","pop","inputOutputComparator","a","b","tradeComparator","ioComp","route","Trade","amount","tradeType","Array","EXACT_INPUT","i","executionPrice","exactIn","amountIn","exactOut","amountOut","EXACT_OUTPUT","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","nextAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","worstExecutionPrice","bestTradeExactOut","currencyIn","currencyAmountOut","nextAmountOut","tokenIn","isInsufficientReservesError","getSigner","library","account","connectUnchecked","toHex","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","methodName","to","recipient","allowedSlippage","map","deadline","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","currencyA","currencyB","highest","arguments","GT","lowest","LT","from","total","base","roundUp","elastic","solidityType"],"mappings":"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"}